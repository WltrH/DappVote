{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","alert","location","reload","console","log","provider","providers","HttpProvider","App","useState","setWeb3","contract","setContract","accounts","setAddress","inputValue","setInputValue","owner","setOwner","winner","setWin","voterArray","setVoterA","propalArray","setProposalA","votedIdArray","setVotedIdA","workf","setWork","updateWorflowStatus","methods","workflowStatus","call","from","textStatus","id","changeValueInput","e","target","value","addVoter","send","addProposal","setVote","tallyVotes","winningProposalID","winProposal","useEffect","web3provider","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","contractOwner","error","setupWeb3","options","fromBlock","toBlock","options1","getPastEvents","listAddress","listId","listVote","events","VoterRegistered","event","push","ProposalRegistered","Voted","idVoted","setEvent","onload","className","type","placeholder","onChange","onClick","map","adresse","returnValues","voterAddress","colSpan","proposalId","descPropal","voter","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6523473e.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('disconnect',function(){\n            alert(\"il faut se connecter\");\n          });\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });     \n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n       \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState, useEffect } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nfunction App () {\n  //state = { storageValue: 0, web3: null, accounts: null, contract: null, addresses: null };\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [accounts, setAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(0);\n  const [owner, setOwner] = useState(null);\n  const [winner,setWin] = useState(\"\");\n  const [voterArray, setVoterA] = useState([]);\n  const [propalArray, setProposalA] = useState([]);\n  const [votedIdArray, setVotedIdA] = useState([]);\n  const [workf, setWork] = useState (\"registering voters\");\n\n  \n\n  \n\n  useEffect (() => {\n     setupWeb3 ();\n     async function setupWeb3() {\n      try {\n        const web3provider = await getWeb3();\n        const accounts = await web3provider.eth.getAccounts();\n\n        const networkId = await web3provider.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const instance = new web3provider.eth.Contract(\n          VotingContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        const contractOwner = await instance.methods.owner().call();\n        //let text = (null);\n        \n        \n        \n        setWeb3(web3provider);\n        setAddress(accounts);\n        setContract(instance);\n        setOwner(contractOwner);\n\n\n        console.log(contract);\n        console.log(web3);\n\n        \n      }\n      catch (error) {\n        // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n\n      }\n     }\n\n  }, []);\n  console.log(\"contract :\",contract);\n  console.log(\"web3 :\",web3);\n  console.log(\"Worflow :\",workf);\n\n  \n\n useEffect (() => {\n\n  async function setEvent() {\n    if (contract){\n\n      let options = {\n        fromBlock: 0,\n        toBlock: 'latest'\n      };\n    \n      let options1 = {\n        fromBlock: 0,                 \n      };\n  \n      let listAddress = await contract.getPastEvents('VoterRegistered', options);\n      let listId = await contract.getPastEvents('ProposalRegistered', options1);\n      let listVote = await contract.getPastEvents('Voted', options1);\n  \n    \n        contract.events.VoterRegistered(options)\n          .on('data', event => listAddress.push(event));\n  \n        contract.events.ProposalRegistered(options1)\n          .on('data', event => listId.push(event));\n  \n        contract.events.Voted(options1)\n          .on('data', event => listVote.push(event));\n  \n        contract.events.idVoted(options1)\n          .on('data', event => console.log('ICI ID VOTE GAGNANT' ,event));\n  \n  \n  \n        setVoterA(listAddress);\n        setProposalA(listId);\n        setVotedIdA(listVote);\n    }\n      \n\n  }  \n    setEvent();\n  }, []);\n\n  useEffect (() => {\n    updateWorflowStatus();\n  }, []);\n\n  async function updateWorflowStatus (){\n      if(contract){\n        const idStatus = await contract.methods.workflowStatus().call({from: accounts[0]});\n        textStatus(idStatus);\n      }\n  }\n\n  function textStatus(id) {\n    switch(id) {\n      case \"0\":\n        setWork(\"Regestering Voters\");\n        break;\n      case \"1\":\n        setWork(\"Proposals registration started\");\n        break;\n      case \"2\":\n       setWork(\"Proposals registering ended\");\n       break;\n      case \"3\":\n        setWork(\"Voting session started\");\n        break;\n      case \"4\":\n        setWork(\"Voting session ended\");\n        break;\n      case \"5\":\n       setWork(\"Vote tallied\");\n       break;\n      default:\n        setWork(\"Status error\")\n    }\n  }\n\n  window.onload = updateWorflowStatus();\n\n\n  //faire les fonctions pour interagir avec le contrat\n\n  function changeValueInput(e){\n    setInputValue(e.target.value);\n  }\n\n  \n  async function addVoter(){\n    await contract.methods.addVoter(inputValue).send({from : accounts[0]});\n    console.log(inputValue);\n    console.log(owner);\n  }\n\n  async function addProposal(){\n    await contract.methods.addProposal(inputValue).send({from : accounts[0]});\n    console.log(inputValue);\n  }\n\n  async function addVoteProposal(){\n    await contract.methods.setVote(inputValue).send({from : accounts[0]});\n    await console.log(inputValue);\n  }\n\n  async function TallyVote(){\n\n    await contract.methods.tallyVotes().send({from : accounts[0]});\n    const winProposal = await contract.methods.winningProposalID().call({from : accounts[0]});\n    setWin (winProposal);\n    console.log(\"Vote constante winningProposal\",winProposal);\n    console.log(\"Vote constante winner\",winner);\n  }\n\n\n\n\n  //========================== STATUS ==================================\n\n\n  function startProposal () {\n    contract.methods.startProposalsRegistering().send({from : accounts[0]});\n  }\n\n  function endProposal () {\n    contract.methods.endProposalsRegistering().send({from : accounts[0]});\n  }\n\n  function startVoting () {\n    contract.methods.startVotingSession().send({from : accounts[0]});\n  }\n\n  function endVoting () {\n    contract.methods.endVotingSession().send ({from : accounts[0]});\n  }\n\n//================================Page Web========================================\n\n    if (!web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n     \n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n\n        {accounts}\n        <h2>Owner du Contract</h2>\n        {owner}\n\n        <h2>Workflow status</h2>\n        {workf}\n        <h2>Veuillez rentrer un voter</h2>\n        <input type='text' placeholder='Paste address here ..' onChange={(e) => changeValueInput(e)} />\n        <button className='btn-Voter' onClick={addVoter} >Add voter</button>\n        <table>\n          <caption>Voters enregistrés</caption>\n         \n          <tr>\n            <th>Address Voters</th>\n           </tr>\n           <tr>\n           {voterArray.map((adresse) => (\n                  <tr><td>{adresse.returnValues.voterAddress} </td></tr>\n                ))}\n          </tr>\n        </table>\n        \n\n        <h2>Veuillez rentrer une proposition</h2>\n        <input type='text' placeholder='Paste proposition here ..' onChange={(e) => changeValueInput(e)}/>\n        <button className='btn-Proposal' onClick={addProposal} >Add proposal</button>\n        <table>\n          <thead>\n              <tr>\n                <th colSpan=\"2\">tableau proposition</th>\n              </tr>\n          </thead>\n\n          <caption>Tableau des propositions</caption>\n            <tr>\n              <th>Identifiant</th>\n              <th>Proposition</th>\n            </tr>\n\n            <tr>\n            {propalArray.map((adresse) => (\n                <td>{adresse.returnValues.proposalId} </td>\n              ))}\n           \n            {propalArray.map((adresse) => (\n                <td>{adresse.returnValues.descPropal}</td>\n              ))}\n            </tr>\n        </table>\n       \n        <h2>Veuillez rentrer votre vote</h2>\n        <input type='text' placeholder='Paste proposition that you want vote for here ..' onChange={(e) => changeValueInput(e)}/>\n        <button className='btn-VoteProposal' onClick={addVoteProposal} >Add VoteProposal</button>\n        <table>\n          <thead>\n            <tbody>\n              <tr>\n                <td>Vote effectué</td>\n                {votedIdArray.map((adresse) => (\n                  <tr><td>{adresse.returnValues.voter} {adresse.returnValues.proposalId} </td></tr>\n                ))}\n                \n              </tr>\n            </tbody>\n          </thead>\n\n        </table>\n\n        <h2>Résultat du vote</h2>\n        <button className='btn-Tallyvote' onClick={TallyVote} >Résultat vote</button>\n        {winner}\n        \n        <h2>Changement de status</h2>\n        <button className='btn-startProposalsRegistering' onClick={startProposal} >Start Proposal</button> \n        <button className='btn-endProposalsRegistering' onClick={endProposal} >End Proposal</button>\n        <button className='btn-startVotingSession' onClick={startVoting} >Start Voting</button> \n        <button className='btn-endVotingSession' onClick={endVoting} >End Voting</button>\n        \n      </div>\n    );\n   \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}